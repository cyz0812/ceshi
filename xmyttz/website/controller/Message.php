<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/8/10 0010
 * Time: 下午 1:42
 *
 * 消息管理和发送消息
 */

namespace app\website\controller;

use think\controller;


use app\base\controller\Base;

use think\Request;

class Message extends  Base{
     public $message;
//     构造函数
     public function _initialize(){
         parent::_initialize(); // TODO: Change the autogenerated stub
         $this->message=model('Message');
     }


//     消息发送
     public function yt_message(){
        if(!empty(input('title'))){
            $data['title']  =   input('title');
            $data['state']  =   0;
            $data['content']=   input('content');
            $data['date']   =   date("Y-m-d H:i:s",time());
            $data['type']   =   input('type');
            foreach ( $_POST['userid'] as $userid ){
                $data['userid']=$userid;
                $data['username']=$this->message->message($userid);

            }
            $row=$this->message->addMessage($data);
            if($row == 1){
                $this->success('发送成功！','yt_message');
            }
            else {
                $this->error('发送失败，请重新发送。。。','yt_message');
            }
        }
         $list   =   $this->message->lists();
         $this->assign('list',$list);
        echo $this->fetch();
    }


//    消息管理
     public function yt_messagelist(){
         $start_date    =   input('start_date');
         $end_date      =   input('end_date');
         $userlist      =   $this->message->lists();
         $input         =   input('');
         $map           =   array();
         $this->assign('userlist',$userlist);
         if($start_date && $end_date){
            $map['date'] = ['between time',array($input['start_date'],$input['end_date'])];
        }else{
            $map['date'] = ['> time',date('Y-m-d H:i:s',strtotime('-1 day'))];
            $this->assign('start_date',date('Y-m-d H:i:s',strtotime('-1 day')));
            $this->assign('end_date',date('Y-m-d H:i:s',time()));
        }

        if(input('type') && input('type') != -1){
            $map['type']    =   input('type');
        }
        if(input('type') && input('userid') !=-1){
            $map['userid']  =   input('userid');
        }
        $messagelist   =   $this->message->allMessage($map);
        $page          =   $messagelist->render();
        $this->assign('messagelist',$messagelist);
        $this->assign('page',$page);
        echo $this->fetch();

    }



//    消息删除
    public function message_detail() {
    	if (input('id')) {
    		$message_row = $this->message->message_row();
    		$user_row = $this->message->user($message_row);
    		$this->assign('message', $message_row);
    		$this->assign('user', $user_row);
    		echo $this->fetch();
		}elseif (input('delete')) {
			$delete = input('delete');
			$row = $this->message->row($delete);
			if ($row) {
				$this->success('删除成功！', 'yt_messagelist');
			} else {
				echo "<script>alert('删除失败！请重新删除');history.go(-1)</script>";
			}
		}else {
			echo "<center><img src='/Public/img/404.gif'></center>";
		}
    }

    public function messageDelete()
    {
        $request = Request::instance()->post(('ids/a'));
        if (!empty($request)) {
            $row = $this->message->mess($request);

            if ($row === false) {
                $arr['flag'] = 0;
            } else {
                $arr['flag'] = 1;

                if ($row === false) {
                    $arr['flag'] = 0;
                } else {
                    $arr['flag'] = 1;
                }
                return json($arr);
            }
        }
        else{
                echo "<center><img src='/Public/img/404.gif'></center>";
            }
    }

}